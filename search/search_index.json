{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>CLI is a small library to wrap all the needed informations to build a command line tool. The idea to build this came while reading the ponylang documentation realising that other languages use a similar approach for the entry point of the app, so I decided to have something similar for PHP.</p> <p>The said approach is to have a <code>main</code> function as the starting point of execution of your code. This function has a the environment it runs in passed as argument so there's no need for global variables. However since not everything can be passed down as argument (it would complicate the interface), ambient authority can be exercised (as in regular PHP script).</p> <p>To correctly use this library you must validate your code with <code>vimeo/psalm</code></p>"},{"location":"#installation","title":"Installation","text":"<pre><code>composer require innmind/cli\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To start a new CLI tool you need this boilerplate code:</p> cli.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\{\n    Str,\n    Attempt,\n};\n\nnew class extends Main {\n    /**\n     * @return Attempt&lt;Environment&gt;\n     */\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        // Your code here\n\n        return $env-&gt;output(Str::of(\"Hello world\\n\"));\n    }\n};\n</code></pre> <p>This will directly call the <code>main</code> function. The <code>$env</code> variable gives you access to the 3 standard streams (<code>stdin</code>, <code>stdout</code>, <code>stderr</code>), the list of arguments passed in the cli, all the environment variables, the working directory, if the terminal is interactive and a method to specify the exit code.</p>"},{"location":"testing/","title":"Testing","text":"<p>To ease the process of testing your commands this package provides an implementation of <code>Environment</code> just for this case. This implementation has the same behaviour as the one provided provided when running your tool.</p> <p>You can write such a test like this:</p> <pre><code>use Innmind\\CLI\\{\n    Commands,\n    Environment\\InMemory,\n};\nuse PHPUnit\\Framework\\TestCase;\n\nclass GreetTest extends TestCase\n{\n    public function testCommandGreetsTheUser()\n    {\n        $commands = Commands::of(new Greet);\n        $environment = $commands(InMemory::of(\n            [], // no chunks in STDIN\n            false, // non interactive mode\n            ['cli.php', 'greet', 'Bob'], // to simulate `php cli.php greet Bob`\n            [], // environment variables\n            '/tmp/', // working directory path\n        ))-&gt;unwrap();\n\n        // it asked to output \"Hi Bob\\n\"\n        $this-&gt;assertSame([\"Hi Bob\\n\"], $environment-&gt;outputs());\n        // it didn't write anything to STDERR\n        $this-&gt;assertSame([], $environment-&gt;errors());\n        // it didn't specify any exit code, meaning it will default to 0\n        $this-&gt;assertFalse($environment-&gt;exitCode()-&gt;match(\n            static fn() =&gt; true,\n            static fn() =&gt; false,\n        ));\n    }\n}\n</code></pre>"},{"location":"use-cases/commands/","title":"Commands","text":"<p>Commands are a way to define the arguments and options the user can provide to interact with your tool.</p>"},{"location":"use-cases/commands/#single-command-tool","title":"Single command tool","text":"<p>Some tools are so simple that it provides a single command. You can build one like this:</p> Greet.php<pre><code>declare(strict_types = 1);\n\nuse Innmind\\CLI\\{\n    Command,\n    Command\\Usage,\n    Console,\n};\nuse Innmind\\Immutable\\{\n    Str,\n    Attempt,\n};\n\nfinal class Greet implements Command\n{\n    /**\n     * @return Attempt&lt;Console&gt;\n     */\n    public function __invoke(Console $console): Attempt\n    {\n        return $console-&gt;output(\n            Str::of('Hi ')\n                -&gt;append($console-&gt;arguments()-&gt;get('name'))\n                -&gt;append(\"\\n\"),\n        );\n    }\n\n    public function usage(): Usage\n    {\n        return Usage::of('greet')-&gt;argument('name');\n    }\n}\n</code></pre> cli.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n    Commands,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\Attempt;\n\nnew class extends Main {\n    /**\n     * @return Attempt&lt;Environment&gt;\n     */\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        $run = Commands::of(new Greet);\n\n        return $run($env);\n    }\n};\n</code></pre> <p>You can run this with <code>php cli.php greet Bob</code> and it will print <code>Hi Bob</code>. And since it's a single command tool you can omit the <code>greet</code> and run it with <code>php cli.php Bob</code> and it will print the same thing.</p>"},{"location":"use-cases/commands/#multi-commands-tool","title":"Multi commands tool","text":"<p>For more complex tools you'll want to provide mutiple commands to the user. The process is the same as the example above but you only need to provide multiple commands to the <code>Commands</code> object like so:</p> cli.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n    Commands,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\Attempt;\n\nnew class extends Main {\n    /**\n     * @return Attempt&lt;Environment&gt;\n     */\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        $run = Commands::of(new Command1, new Command2, new Etc);\n\n        return $run($env);\n    }\n};\n</code></pre> <p>In this case however you always need to provide the name of the command you want to run.</p>"},{"location":"use-cases/commands/#declaring-a-command-usage","title":"Declaring a command usage","text":"<p>The <code>usage</code> method of a command is the way to declare the name, the arguments/options and the descriptions of the command. When declared via a <code>string</code> passed to <code>Usage::parse()</code> it's always formatted like this:</p> <pre><code>{command-name} {list of arguments and options}\n\n{Optional short description}\n\n{Optional long description}\n</code></pre> <p>The short description is displayed when listing all the commands (via <code>php cli.php --help</code>).</p> <p>The long description is displayed when asking for help on a specific command (via <code>php cli.php command-name --help</code>).</p> <p>Here are all the syntax to declare arguments and options:</p> <ul> <li><code>argument-name</code> in plain text means it's a required argument, access it via <code>$console-&gt;arguments()-&gt;get('argument-name')</code></li> <li><code>[argument-name]</code> means it's an optional argument, access it via <code>$console-&gt;arguments()-&gt;maybe('argument-name')</code></li> <li><code>...arguments</code> means it's a variadic argument, you can only declare one as a last argument and access it via <code>$console-&gt;arguments()-&gt;pack()</code></li> <li><code>-f|--flag</code> declares an option that cannot have a value, access it via <code>$console-&gt;options()-&gt;contains('flag')</code></li> <li><code>-o|--option=</code> declares an option that can have a value, access it via <code>$console-&gt;options()-&gt;maybe('option')</code></li> </ul>"},{"location":"use-cases/hello-world/","title":"Hello world","text":"<p>This is the simplest example to write a cli tool.</p> cli.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\{\n    Str,\n    Attempt,\n};\n\nnew class extends Main {\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        return $env-&gt;output(Str::of(\"Hello world\\n\"));\n    }\n};\n</code></pre>"},{"location":"use-cases/hello-world/#greeting-someone-by-their-name","title":"Greeting someone by their name","text":"cli.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\{\n    Str,\n    Attempt,\n};\n\nnew class extends Main {\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        return $env\n            -&gt;arguments()\n            -&gt;get(1) // not zero because it's the cli name\n            -&gt;match(\n                static fn($name) =&gt; $env-&gt;output(Str::of(\"Hello $name\\n\")),\n                static fn() =&gt; $env-&gt;error(Str::of(\"Sorry, I didn't catch your name\\n\")),\n            );\n    }\n};\n</code></pre> <p>You can run it via <code>php cli.php John</code> or <code>php cli.php</code> to have the error message.</p>"},{"location":"use-cases/hello-world/#ask-for-the-name-interactively","title":"Ask for the name interactively","text":"cli.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\{\n    Str,\n    Attempt,\n};\n\nnew class extends Main {\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        $question = Question::of(\"What's your name?\");\n\n        return $question($env)-&gt;flatMap(static function($response) {\n            [$response, $env] = $response;\n\n            return $response-&gt;match(\n                static fn($name) =&gt; $env-&gt;output(Str::of(\"Hello $name\\n\")),\n                static fn() =&gt; $env-&gt;error(Str::of(\"Sorry, I didn't catch your name\\n\")),\n            );\n        });\n    }\n};\n</code></pre>"},{"location":"use-cases/reading-input/","title":"Reading the input","text":"<p>In some cases you want your cli app to be in the middle of a pipeline by feeding the input via <code>stdin</code>.</p> <p>The example below will greet all the users:</p> greet.php<pre><code>declare(strict_types = 1);\n\nrequire 'path/to/composer/autoload.php';\n\nuse Innmind\\CLI\\{\n    Main,\n    Environment,\n};\nuse Innmind\\OperatingSystem\\OperatingSystem;\nuse Innmind\\Immutable\\{\n    Str,\n    Attempt,\n};\n\nnew class extends Main {\n    protected function main(Environment $env, OperatingSystem $os): Attempt\n    {\n        $buffer = Str::of('');\n\n        do {\n            [$read, $env] = $env-&gt;read();\n            $buffer = $read-&gt;match(\n                static fn($chunk) =&gt; $buffer-&gt;append($chunk-&gt;toString()),\n                static fn() =&gt; $buffer,\n            );\n\n            if ($buffer-&gt;contains(\"\\n\")) {\n                [$buffer, $env] = $buffer\n                    -&gt;split(\"\\n\")\n                    -&gt;match(\n                        static fn($name, $buffer) =&gt; [\n                            Str::of(\"\\n\")-&gt;join($buffer-&gt;map(fn($chunk) =&gt; $chunk-&gt;toString())),\n                            $env-&gt;output(Str::of(\"Hello {$name-&gt;toString()}\\n\"))-&gt;unwrap(),\n                        ],\n                        static fn() =&gt; [\n                            $buffer,\n                            Attempt::result($env),\n                        ],\n                    );\n\n                $outputFailure = $env-&gt;match(\n                    static fn() =&gt; false,\n                    static fn() =&gt; true,\n                );\n\n                if ($outputFailure) {\n                    return $env;\n                }\n            }\n\n        } while ($read-&gt;match(\n            static fn() =&gt; true,\n            static fn() =&gt; false,\n        )); // stops when no more input\n\n        return Attempt::result($env);\n    }\n};\n</code></pre> <p>You can test this via <code>cat list-of-names.txt | php greet.php</code>.</p>"}]}